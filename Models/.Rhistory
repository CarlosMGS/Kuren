library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select comunidad, n_year, flow, age, id_com, dim_companies.class as com_type, quantity, id_edu, edu_ach, dim_edu_achieved.perc as edu_perc,
id_pov, dim_poverty.class as pov_type, dim_poverty.perc as pov_perc
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
#eliminamos ids
mig <- mig[,-5]
mig <- mig[,-7]
mig <- mig[,-9]
#cambiamos los NA por -1 para que funcione
for(i in 1:length(mig2)){
mig2[is.na(mig2[,i]), i] <- -1
}
library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select comunidad, n_year, flow, age, id_com, dim_companies.class as com_type, quantity, id_edu, edu_ach, dim_edu_achieved.perc as edu_perc,
id_pov, dim_poverty.class as pov_type, dim_poverty.perc as pov_perc
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select *
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
View(mig)
#eliminamos ids
mig <- mig[,-1]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-23]
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select *
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
#eliminamos ids
mig <- mig[,-1]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-22]
mig <- mig[,-14]
#cambiamos los NA por -1 para que funcione
for(i in 1:length(mig)){
mig[is.na(mig[,i]), i] <- -1
}
cor(mig$comunidad, mig$flow)
cor(as.numeric(mig$comunidad), mig$flow)
cor(as.numeric(mig$comunidad), mig$age)
cor(as.numeric(mig$comunidad), mig$anonima)
cor(as.numeric(mig$flow), mig$anonima)
cor(as.numeric(mig$flow), mig$autonomos)
cor(as.numeric(mig$flow), mig$personas)
cor(as.numeric(mig$flow), mig$coop)
cor(as.numeric(mig$flow), mig$resp_limit)
cor(as.numeric(mig$comanditaria), mig$autonomos)
cor(mig$flow, mig$autonomos)
cor(mig$flow, mig$analfabets)
cor(mig$flow, mig$hog_baja_int)
cor(mig$flow, mig$car_material)
andalusia18 <- mig[mig$comunidad=="Andalucía", 3]
andalusia30 <- mig[mig$comunidad=="Andalucía" && mig$age == 30, 3]
andalusia30 <- mig[mig$comunidad=="Andalucía" && mig$age == "30", 3]
library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select *
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
#eliminamos ids
mig <- mig[,-1]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-22]
mig <- mig[,-14]
View(mig)
#cambiamos los NA por -1 para que funcione
for(i in 1:length(mig)){
mig[is.na(mig[,i]), i] <- -1
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., madMig)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(fit$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(fit$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(fit$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
## plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
for(n in unique(mig$comunidad)){
grafPorComunidad(n);
}
grafPorComunidad("Andalucía")
grafPorComunidad("Andalucía")
function (xlim, ylim, log = "", asp = NA, ...)
{
.External.graphics(C_plot_window, xlim, ylim, log, asp,
...)
invisible()
}
grafPorComunidad("Andalucía")
n in unique(mig$comunidad)
grafPorComunidad("Cataluña")
unique(mig$comunidad
unique(mig$comunidad)
n in mig$comunidad
mig$comunidad
com <- mig$comunidad[!duplicated(mig$comunidad)]
n in com
com
com[1]
1:19
for(n in 1:19){
grafPorComunidad(com[i]);
}
library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select *
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#hacemos una copia para trabajar
mig <- data
#eliminamos ids
mig <- mig[,-1]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-22]
mig <- mig[,-14]
#cambiamos los NA por -1 para que funcione
for(i in 1:length(mig)){
mig[is.na(mig[,i]), i] <- -1
}
#Funcion lm() con todos los datos
fit <- lm(mig$flow ~ ., mig)
#attributes(fit)
#summary
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
#Cajas y bigotes
boxplot(mig$flow,horizontal =T )
#Histograma
hist(mig$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(mig[c("n_year", "flow")])
abline(lm(mig$flow ~ mig$n_year))
#Grafica de densidad
d <- density(mig$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(fit$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
grafPorComunidad("Cataluña")
com <- mig$comunidad[!duplicated(mig$comunidad)]
for(n in 1:19){
grafPorComunidad(com[i]);
}
div <- mig[mig$comunidad == "Cataluña", ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = "Cataluña")
#Cajas y bigotes
boxplot(fit$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(div$flow,horizontal =T )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
grafPorComunidad("Cataluña")
for(n in 1:19){
grafPorComunidad(com[i]);
}
1:19
for(n in 1:19){
grafPorComunidad(com[n]);
}
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(div$flow,horizontal =T, main = n )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
for(n in 1:19){
grafPorComunidad(com[n]);
}
library(RODBC)
library(dplyr)
library(stats)
install.packages("RODBC")
install.packages("dplyr")
library(RODBC)
library(dplyr)
library(stats)
#liberamos memoria
rm(list = ls())
gc()
#conexiÃ³n con la base de datos
con <- odbcDriverConnect("driver={SQL Server Native Client 11.0};Server=min-serv.database.windows.net ; Database=Mineria;Uid=usuariomin; Pwd=dctaMineria5")
#query para traer los datos de trabajo
data <- sqlQuery(con, "select *
from facts_migration left join dim_companies on (facts_migration.id_com = dim_companies.id_c)
left join dim_edu_achieved on (facts_migration.id_edu = dim_edu_achieved.id_e)
left join dim_poverty on (facts_migration.id_pov = dim_poverty.id_p)")
#añadimos columna para la categoría en una copia
mig2 <- data
#hacemos una copia para trabajar
mig <- data
#eliminamos ids
mig <- mig[,-1]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-5]
mig <- mig[,-22]
mig <- mig[,-14]
#cambiamos los NA por -1 para que funcione
for(i in 1:length(mig)){
mig[is.na(mig[,i]), i] <- -1
}
#añadimos columna para la categoría en una copia
mig2 <- mig
mig2["grupo_edad"] <- ""
for(i in 1:nrow(mig2)){
if(mig$age[i] < 18){
mig2$grupo_edad[i] <- "menores"
}else if(mig$age[i] >= 18 && mig$age[i] < 39){
mig2$grupo_edad[i] <- "jóvenes"
}else if(mig$age[i] >= 39 && mig$age[i] < 66){
mig2$grupo_edad[i] <- "adultos"
}else{
mig2$grupo_edad[i] <- "tercera_edad"
}
}
unique(mig2$grupo_edad)
mig3 <- mig2
mig3 <- mig2
columnas <- colnames(mig2)[-4]
columnas <- columnas[-3]
mig3 <- group_by(mig3, columnas) %.% summarise(flow = sum(flow))
mig3 <- group_by(mig3, columnas) %>% summarise(flow = sum(flow))
ddply(mig3, columnas, summarize, flow=sum(flow))
mig3<-plyr::ddply(mig3, columnas, plyr::summarize, flow=sum(flow))
mig3<-dplyr::ddply(mig3, columnas, dplyr::summarize, flow=sum(flow))
install.packages("plyr")
library(plyr)
mig3<-plyr::ddply(mig3, columnas, plyr::summarize, flow=sum(flow))
View(mig3)
mig <- mig3
for(n in 1:19){
grafPorComunidad(com[n]);
}
grafPorComunidad <- function(n){
div <- mig[mig$comunidad == n, ]
#Funcion lm() con todos los datos
div <- div[,-1]
fit <- lm(div$flow ~ ., div)
#attributes(fit)
summary(fit)
#4 graficos a la vez
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit, main = n)
#Cajas y bigotes
boxplot(div$flow,horizontal =T, main = n )
#Histograma
hist(div$flow, xlab="",ylab="",main="")
#Grafica de la regresion lineal
plot(div[c("n_year", "flow")])
abline(lm(div$flow ~ div$n_year))
#Grafica de densidad
d <- density(div$flow)
plot(d, main="Densidad")
polygon(d, col="red", border="blue")
}
for(n in 1:19){
grafPorComunidad(com[n]);
}
com <- unique(mig$comunidad)
for(n in 1:19){
grafPorComunidad(com[n]);
}
#uso de kameans
(kmeans.result <- kmeans(mig3, 19))
#uso de kameans
(kmeans.result <- kmeans(mig3, 19))
library(fpc)
install.packages("fpc")
library(fpc)
#uso de kameans
(kmeans.result <- kmeans(mig3, 19))
sum( is.na( mig3 ) ) > 0
#uso de kameans
(kmeans.result <- kmeans(mig3, 19))
#uso de kameans
(kmeans.result <- kmeans(mig3, 19))
